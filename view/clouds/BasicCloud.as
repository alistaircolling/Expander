package view.clouds{	import com.greensock.TweenMax;	import com.greensock.easing.Quint;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Point;		import org.flintparticles.common.actions.Age;	import org.flintparticles.common.counters.Blast;	import org.flintparticles.common.counters.TimePeriod;	import org.flintparticles.common.initializers.AlphaInit;	import org.flintparticles.common.initializers.ImageClass;	import org.flintparticles.common.initializers.Lifetime;	import org.flintparticles.twoD.actions.DeathZone;	import org.flintparticles.twoD.actions.MatchVelocity;	import org.flintparticles.twoD.actions.Move;	import org.flintparticles.twoD.actions.RandomDrift;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.Position;	import org.flintparticles.twoD.initializers.Velocity;	import org.flintparticles.twoD.zones.BitmapDataZone;	import org.flintparticles.twoD.zones.DiscZone;	import org.flintparticles.twoD.zones.RectangleZone;	import org.flintparticles.common.actions.Fade;	import utils.Utils;	import org.flintparticles.common.easing.Quartic;	import flash.utils.getDefinitionByName;			public class BasicCloud extends Sprite	{		private var animal:String;		private var id:uint;		private var bitmap:Bitmap;		private var velocity:Point;		private var maxVerticalVelo:int = 1;		private var maxHorizontalVelo:int = 1;		private var hozSpeed:Number;		private var vertSpeed:Number;		private var targP:Point;		private var renderer:*;		private var emitter:Emitter2D;		private var placedShape:Position;		private var currentBMPD:BitmapData;		private var shapeBitmap:Bitmap;		private var randomDrift:RandomDrift;		private var scale:Number;		private var holder:Sprite;		private var cloudType:String;		public static const RESET_ME:String = "removeMe";				public function BasicCloud(n:uint, anim:String, r:*, typ:String = "")		{		//	trace("BasicCloud:"+n+"  created");			renderer = r;			id = n;			cloudType = typ;			animal = anim+cloudType;			init();		}				private function init():void{			holder = new Sprite();			addChild(holder);			bitmap = returnBitmap();			bitmap.smoothing = true;			cacheAsBitmap = true;			shapeBitmap = returnBitmap();			currentBMPD = shapeBitmap.bitmapData;						holder.addChild(bitmap);			initEmitter();		}				private function setCurrentBMPData():void{			currentBMPD = new BitmapData(bitmap.width, bitmap.height, true, 0x00E56BE9);			currentBMPD.draw(shapeBitmap);			var shapeBMP:Bitmap = new Bitmap(currentBMPD, "auto", true);		}				private function scaleBitmapdataToMatchBitmap():void{			/*			Create a new Matrix for the transformation.			The Matrix is as below:			x-scale (2), y-skew (0),			x-skew (0), y-scale (1),			x-position (200), y-position (150)			Explanation:			x-scale equal 2 means scale MovieClip 200% along x-axis			y-skew equal 0 means no skew along y-axis			x-skew equal 0 means no skew along x-axis			y-scale equal 1 means scale MovieClip 100% along y-axis			x-position equal 200 means move MovieClip to x-200			y-position equal 150 means move MovieClip to y-150			*/			var target:Matrix = new Matrix(				scale, 0,				0, scale,				0, 0			);						//Set the Transform.matrix value of the MovieClip (square_mc)			//to the new Matrix			currentBMPD = new BitmapData(bitmap.width, bitmap.height);			currentBMPD.draw(shapeBitmap, target);		}				private function startAnim():void{			velocity = new Point(Math.round(Math.random()*maxHorizontalVelo), Math.round(Math.random()*maxVerticalVelo));			trace("velocity:"+velocity.toString());			hozSpeed = .3*Math.random();			vertSpeed = .3*Math.random();			addEventListener(Event.ENTER_FRAME, oef);		}				private function initEmitter():void		{		//	trace("! INIT EMITTER");			emitter = new Emitter2D();			renderer.addEmitter(emitter);			emitter.counter = new TimePeriod(50, .3, Quartic.easeIn);			emitter.addInitializer(new AlphaInit(0.08, .1));//.01 .1			emitter.addInitializer( new ImageClass(WhiteRadial));				var placedShape:Position =  new Position( new BitmapDataZone( shapeBitmap.bitmapData ) );      		///SET THE SHAPE THE PARTICLES EMIT FROM			emitter.addInitializer( placedShape);			//DEATH ZONE			var dzone:RectangleZone = new RectangleZone( -10, -10, 620, 620 );			var deathZone:DeathZone = new DeathZone( dzone, true );			emitter.addAction( deathZone );			emitter.addInitializer(new Lifetime(15, 30));			emitter.addAction(new Age());			var randomDrift:RandomDrift = new RandomDrift(100, 35);			emitter.addAction(randomDrift);			emitter.addAction(new Fade(.1, 0));			emitter.addAction(new Move());		}				public function convertToParticles(fadeGlow:Boolean = true):void{			trace("********CONVERT TO PARTICLES********");			startConvert();		}									private function startConvert():void		{			trace(">>>>>>>>> start_Convert <<<<<<<<<<");			emitter.start();			addEventListener(Event.ENTER_FRAME,fadeOEF);		}				private function fadeOEF(e:Event):void		{			if (holder.alpha<=0){				removeEventListener(Event.ENTER_FRAME,fadeOEF);				dispatchEvent(new Event(RESET_ME));			}else{				holder.alpha -= .2; 				x -= .5;				y -= .6;			}		}				private function oef(e:Event):void{		//	trace("dd");			x -= hozSpeed;			y += vertSpeed;		}				private function returnBitmap():Bitmap{			//TODO getclassbydefinition			var retBMP:Bitmap;			var classToMake:String = animal+id.toString();			var ClassReference:Class = getDefinitionByName(classToMake) as Class;			retBMP = Utils.returnBitmap(ClassReference);			return retBMP;		}				public function setWidth(n:int):void{			//scale the bitmap			scaleToWidth(n, bitmap);			//draw bitmap data 			shapeBitmap.scaleX = scale;			shapeBitmap.scaleY = scale;			currentBMPD = shapeBitmap.bitmapData;//new BitmapData(bitmap.width, bitmap.height);			//currentBMPD.draw(shapeBitmap);			var bmp:Bitmap = new Bitmap(currentBMPD);			bmp.scaleX = scale;			bmp.scaleY = scale;		}				private function scaleToWidth(targW:int, d:DisplayObject):void{			var retD:DisplayObject;			scale = targW/d.width;			trace("scaling to target width:"+targW+" at scale:"+scale);			d.scaleX = scale;			d.scaleY = scale;		}	}}