package{	import com.greensock.TweenMax;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.filters.BitmapFilterQuality;	import flash.filters.BlurFilter;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;	import utils.Utils;		import org.flintparticles.common.actions.Age;	import org.flintparticles.common.actions.Fade;	import org.flintparticles.common.actions.ScaleImage;	import org.flintparticles.common.counters.Blast;	import org.flintparticles.common.counters.Random;	import org.flintparticles.common.counters.TimePeriod;	import org.flintparticles.common.counters.ZeroCounter;	import org.flintparticles.common.displayObjects.RadialDot;	import org.flintparticles.common.displayObjects.Rect;	import org.flintparticles.common.initializers.AlphaInit;	import org.flintparticles.common.initializers.ApplyFilter;	import org.flintparticles.common.initializers.ImageClass;	import org.flintparticles.common.initializers.Lifetime;	import org.flintparticles.common.initializers.SharedImage;	import org.flintparticles.twoD.actions.DeathZone;	import org.flintparticles.twoD.actions.MatchVelocity;	import org.flintparticles.twoD.actions.Move;	import org.flintparticles.twoD.actions.RandomDrift;	import org.flintparticles.twoD.actions.TweenToZone;	import org.flintparticles.twoD.emitters.Emitter2D;	import org.flintparticles.twoD.initializers.Position;	import org.flintparticles.twoD.initializers.Velocity;	import org.flintparticles.twoD.renderers.DisplayObjectRenderer;	import org.flintparticles.twoD.renderers.PixelRenderer;	import org.flintparticles.twoD.zones.BitmapDataZone;	import org.flintparticles.twoD.zones.DiscZone;	import org.flintparticles.twoD.zones.RectangleZone;		public class RolloverSmoke extends Sprite	{		private var sq:Sprite;		private var renderer:DisplayObjectRenderer;		private var emitter:Emitter2D;		private var particlesLimit:uint = 300; 		private var rolloverObject:Sprite;		private var deathZone:DeathZone;		private var emitting:Boolean;				private var genericCloud:GenericCloud;		private var stopTimer:Timer;						private var sideEmitter:SideEmitter;		private var holder:Sprite;				private var rendererHolder:Sprite;		private var _dropFilter:DropShadowFilter;		private var _blurFilter:BlurFilter;				public function RolloverSmoke()		{			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event = null):void{			holder = new Sprite();			rendererHolder = new Sprite();			addChild(rendererHolder);			addChild(holder);			stage.scaleMode = StageScaleMode.NO_SCALE;			renderer = new DisplayObjectRenderer();			rendererHolder.addChild(renderer);			emitter = new Emitter2D();			renderer.addEmitter(emitter);			genericCloud = new GenericCloud();			initialiseEmitter();			_dropFilter = new DropShadowFilter(14, 45, 0xffffff, .3, 18, 18, 15, BitmapFilterQuality.HIGH, false, false, true);			_blurFilter = new BlurFilter(16, 5, BitmapFilterQuality.HIGH);			rendererHolder.filters = [_dropFilter, _blurFilter];		}				private function removeMe():void{			trace("final remove for rolloversmoke");			TweenMax.to(this, 3, {autoAlpha:0, onComplete:finalRemove});			emitter.stop();			renderer.removeEmitter(emitter);		}				private function finalRemove():void{			trace("final remove of rollover smoke");			while(numChildren>0){				removeChildAt(0);			}			renderer.removeEmitter(emitter);			emitter.stop();					}				public function destroy():void{			trace("destroy rolloversmoke");			renderer.removeEmitter(emitter);			emitter.counter = new ZeroCounter();			TweenMax.delayedCall(5, removeMe);		}				private function initialiseEmitter():void{			emitter.addInitializer(new Lifetime(15, 18));			var randomDrift:RandomDrift = new RandomDrift(1, 1);			var actP:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));			emitter.x = actP.x;			emitter.y = actP.y;			var dzone:RectangleZone = new RectangleZone( -10, -10, 620, 620 );			deathZone = new DeathZone( dzone, true );			emitter.addAction( deathZone );			emitter.counter = new Blast(5);			emitter.addInitializer(new AlphaInit(0.08, .1));			emitter.addInitializer( new ImageClass(WhiteRadial));											///SET THE IMAGE CLASS USED FOR EACH PARTICLE			emitter.addInitializer(new Position(new RectangleZone(-30,-30, 20, 10)));			emitter.addInitializer( new Velocity(new RectangleZone(-80, 0, -20, 0)));			emitter.addAction(new Age());			emitter.addAction(new Move());			emitting = false;		}				private function createSideEmitter():void{			sideEmitter = new SideEmitter(70, 20);			sideEmitter.x = 500;			addChild(sideEmitter)		}				public function removeDisplayObject():void{			while(holder.numChildren>0){				var child:* = holder.getChildAt(0);				child.removeEventListener(MouseEvent.MOUSE_OVER, mOver);				child.removeEventListener(MouseEvent.MOUSE_OVER, mOut);				child.removeEventListener(MouseEvent.MOUSE_MOVE, mMove);										holder.removeChildAt(0);			}		}				//sets the rollover object that triggers the emitter		public function setDisplayObject(d:*):void{								d.addEventListener(MouseEvent.MOUSE_OVER, mOver);			d.addEventListener(MouseEvent.MOUSE_OVER, mOut);			d.addEventListener(MouseEvent.MOUSE_MOVE, mMove);			d.alpha = 0;			holder.addChild(d);		}				private function mMove(m:MouseEvent):void{			//trace("mMove");			var actP:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));			emitter.x = actP.x-30;			emitter.y = actP.y-30;		}				private function mOver(m:MouseEvent):void{			if (!emitting){				var actP:Point = globalToLocal(new Point(stage.mouseX, stage.mouseY));				emitter.x = actP.x;				emitter.y = actP.y;				emitter.start();				emitter.counter =  new TimePeriod(30, .5);				emitting = true;				emitter.start();			}		}				private function mOut(m:MouseEvent):void{			if (emitting){				emitting = false;				stopTimer = new Timer(2000, 1);				stopTimer.addEventListener(TimerEvent.TIMER_COMPLETE, stopEmitter);				stopTimer.start();			}		}				private function stopEmitter(t:TimerEvent = null):void{			emitter.counter = new ZeroCounter();		}	}}